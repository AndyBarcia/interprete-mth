MEMOIZACIÓN

Se podría implementar fácilmente con una intrínseca

export fib = \n => {
    if n <= 0 then 0 else if n == 1 then 1 else fib(n-1)+fib(n-2)
}

export fib_memoized = memoize(fib)

Lo que tendría que hacer la función es crear una nueva función que
englobase a fib que fuese tal que así

export fib_memoized = {
	results = {{}}
	
	\n => {
		if (v=results[n]) then return v
		return results[n] = fib(n)
	}
}

Esto significaría que la función podría ser implementada de una manera
tal que así en pseudocódigo.

export memoize = \f => {
	results = {{}}
	
	\args.. => {
		if (v=results[args]) then return v
		return results[args = f(args..)
	}
}

Pero en realidad esta implementación no podría funcionar por dos razones:

	* No podemos saber realmente cuantos argumentos tiene f ni podemos
	  definir una función que tenga los mismos argumentos que otra función.
	* Para conseguir memoización en funciones recursivas se tendría que
	  actualizar su referencia a sí misma para que apunte a la versión
	  memoizada de la función y no la función original.

NÚMERO ARBITRARIO DE ARGUMENTOS EN FUNCIONES DEFINIDAS POR EL USUARIO

Utilizando ".." para indicar que se pasa un número indeterminado
de argumnetos como si fuera una función.

sumar = \xs.. => {
	fold((+), 0, xs)
}

sumar(1,2,3,4,5,6) 

De la misma manera, también se puede utilizar ".." como un spread
operator para pasar un array a una de estas funciones.

sumar(1,2,3,[4,5,6]..)

MODULOS VERDADERAMENTE INDEPENDIENTES

Generalizar el sistema de módulos para permitir también cosas
del estilo de "import "math.mth" as math". Para esto
las asignaciones export no hacen simplemente una asignación
en la tabla de un nivel inferior, si no que guardan sus valores
en una tabla hash especial "TablaHash *exportPoint". 

Los módulos no comparten tabla de símbolos. Esto aseguro que
realmente son independientes-

APLICACIÓN PARCIAL DE FUNCIONES

suma = |x:Numero,y:Numero| -> x+y

suma5 = suma(5)

print(suma5(10)) // 15 

DEFINICIÓN DE FUNCIONES

mitad: Even -> Int
mitad = \x -> x/2

mitad = |x:Even| : Int -> x/2

TIPOS COMO FUNCIONES

Como en LiquidHaskell, un "tipo de datos" es sólo una función
que, dado un valor, nos devuelve verdadero si el valor pertenece
al tipo dado, y falso en caso contrario.

Pero esto va en contra del principio de "parsear, no validar".

type NonZeroNumber = |n:Number| -> n != 0

div = |x:Number, y:NonZeroNumber| : NonZeroNumber -> x/y
mul = |x:Number, y:Number| : Number -> x*y  

type Int = |n| -> *Intrinseca*
type Decimal = |n| -> *Intrinseca*
type String = |s| -> *Intrinseca*
type Funcion = |s| -> *Intrinseca*

type Par = |n:Int| -> n % 2 == 0
type Impar = |n:Int| -> !Par(n)

mitad(5)

error: el valor dado no es de tipo Par
   |
 1 | mitad(5)
   |	   ^
nota: Para que el valor sea de tipo Par, se tiene que cumplir:

	|n:Int| -> n % 2 == 0

error: el valor dado no es de tipo Par
   |
 1 | mitad("hola")
   |	   ^^^^^^
nota: Para que el valor sea de tipo Par, primero tiene que ser un entero.


type NonZeroInt = |n:Int| -> n != 0

type Number = |n| -> Int(n) || Decimal(n)
type NonZeronumber = |n:Number| -> n != 0


type Multiple = |m:Int, n| -> m%n == 0
type Par = Multiple(2)
type Impar = !Par

????

type Lista = |v, n| -> n(v[i]) for all i

type Vector = |x, n| -> longitud(x) == n

append = |x, v: Vector(n)| : Vector(n+1) -> { ... }

v : Vector(_) = [1,2,3,4]
v := append(v, 5)

????

type Animal = |n| -> n is {{
    tipo: String,
    nombre: String
}}

export crear_gato = |nombre:String| : Animal -> {{
    tipo: "Gato",
    nombre: nombre
}}

APLICACIÓN IMPLÍCITA DE ALGUNAS OPERACIONES

Al realizar una operación con una función, se
crea implícitamente otra función

!f es equivalente a \x -> !f(x)

f+g es equivalente a \x,y -> f(x)+g(x)

f(g) es equivalente a \x -> f(g(x))

Claro, el problema sería que con esto no
podríamos pasar funciones como argumentos
Aunque bueno, sí que podríamos aplicar esto
a un número limitado de operaciones intrínsecas
que no tiene sentido sobre funciones, como
!, +, -, etc.

TRAITS

trait Field = |m:Type| -> {{
	suma: |a:m, b:m| : m,
	identidad: m
}}

type Even = |m:Int| -> m%2 == 0

implement Field for Even {
	
}

